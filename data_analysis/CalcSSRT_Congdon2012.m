function subjectSSRTs_final = CalcSSRT_Congdon2012(AverageLast, OutlierCriteria, TrialInclusion, go_CorrectAnswer, go_Answer, go_GoRT, go_Correct, stop_SSD_actual, stop_Correct, stop_TrialComplete, go_TrialCounts, stop_TrialCounts)
% SUBJECTSSRTS_FINAL: Calculates SSRT values for each subject in a merged 
% dataset, based on methods described in 'Measurement and Reliability of 
% Response Inhibition' by Congdon et al. (2012) in Frontiers in Psychology.
% The first three parameters of this function correspond to the 12
% different methods of selecting the data to be used for analysis:
% 
% AverageLast -> "Average" OR "Last"
% OutlierCriteria -> "Lenient" OR "Conservative" OR "None"
% TrialInclusion -> "All" OR "2nd Half"
% 
% The remaining parameters are arrays generated by the MergeSessions.m
% script. 
%
% Example usage: subjectSSRTs_final = CalcSSRT_Congdon2012("Average", "Lenient", "All", go_CorrectAnswer, go_Answer, go_GoRT, go_Correct, stop_SSD_actual, stop_Correct, stop_TrialComplete, go_TrialCounts, stop_TrialCounts);

% Check if string inputs are correct
if ~(strcmpi(AverageLast, 'Average') || strcmpi(AverageLast, 'Last'))
    error(['Invalid AverageLast input: ' AverageLast]);
end
if ~(strcmpi(OutlierCriteria, 'Lenient') || strcmpi(OutlierCriteria, 'Conservative') || strcmpi(OutlierCriteria, 'None'))
    error(['Invalid OutlierCriteria input: ' OutlierCriteria]);
end
if ~(strcmpi(TrialInclusion, 'All') || strcmpi(TrialInclusion, '2nd Half'))
    error(['Invalid TrialInclusion input: ' TrialInclusion]);
end

go_ignoreTrials = false(size(go_Correct));
stop_ignoreTrials = false(size(stop_Correct));

% Estimate each subject's SSRT using the quantile method
subjectSSRTs_init = QuantileMethodSSRT(go_GoRT, go_Correct, stop_SSD_actual, stop_Correct, stop_TrialComplete);

if strcmpi(AverageLast, 'Last')
    % Ignore data from all sessions except the last one from each
    % participant
    for p = 1:size(go_TrialCounts, 1) % For each participant of subjectNumber p
        for s = 1:(size(go_TrialCounts, 2)-1) % For each session of sessionNumber 
            if go_TrialCounts(p, s+1) > 0 || stop_TrialCounts(p, s+1) > 0
                go_ignoreTrials(p, s, :) = true;
                stop_ignoreTrials(p, s, :) = true;
            end

        end
    end 
end

if strcmpi(OutlierCriteria, 'Lenient') || strcmpi(OutlierCriteria, 'Conservative')
    for p = 1:size(go_TrialCounts, 1) % For each participant of subjectNumber p

        stop_success_rate = nansum( reshape(stop_Correct(p, :, :), 1, []) ) / sum(stop_TrialCounts(p, :));
        go_response_rate = (nnz(go_Answer(p, :, :)) - nnz(isnan(go_Answer(p, :, :)))) / sum(go_TrialCounts(p, :));
        go_error_rate = 1 - (( nnz(go_Answer(p, :, :) == go_CorrectAnswer(p, :, :)) + nnz(go_Answer(p, :, :) == 0) ) / sum(go_TrialCounts(p, :)) );

        if strcmpi(OutlierCriteria, 'Lenient')
            if stop_success_rate < 0.25 || stop_success_rate > 0.75 || go_response_rate < 0.60 || go_error_rate > 0.10 || subjectSSRTs_init(p) < 0.050
                go_ignoreTrials(p, :, :) = true;
                stop_ignoreTrials(p, :, :) = true;
                fprintf(['Subject ' num2str(p) ' excluded:']);
                fprintf(['    Percent inhibition on stop trials: ' num2str(stop_success_rate*100) '%']);
                fprintf(['    Percent go-response: ' num2str(go_response_rate*100) '%']);
                fprintf(['    Percent go-errors: ' num2str(go_error_rate*100) '%']);
                fprintf(['    SSRT estimate: ' num2str(subjectSSRTs_init(p)) ' seconds\n']);
            end
        elseif strcmpi(OutlierCriteria, 'Conservative')
            if stop_success_rate < 0.40 || stop_success_rate > 0.60 || go_response_rate < 0.75 || go_error_rate > 0.10 || subjectSSRTs_init(p) < 0.050
                go_ignoreTrials(p, :, :) = true;
                stop_ignoreTrials(p, :, :) = true;
                fprintf(['Subject ' num2str(p) ' excluded:']);
                fprintf(['    Percent inhibition on stop trials: ' num2str(stop_success_rate*100) '%']);
                fprintf(['    Percent go-response: ' num2str(go_response_rate*100) '%']);
                fprintf(['    Percent go-errors: ' num2str(go_error_rate*100) '%']);
                fprintf(['    SSRT estimate: ' num2str(subjectSSRTs_init(p)) ' seconds\n']);
            end
        end
    end 
elseif strcmpi(OutlierCriteria, 'Conservative')
    for p = 1:size(go_TrialCounts, 1) % For each participant of subjectNumber p

    end
end

if strcmpi(TrialInclusion, '2nd Half')
    % Ignore all data from the first half of each session

    for p = 1:size(go_TrialCounts, 1) % For each participant of subjectNumber p

        for s = 1:size(go_TrialCounts, 2) % For each session of sessionNumber 
            numGoTrialsToRemove = floor(go_TrialCounts(p, s)/2);
            numStopTrialsToRemove = floor(stop_TrialCounts(p, s)/2);

            go_ignoreTrials(p, s, 1:numGoTrialsToRemove) = true;
            stop_ignoreTrials(p, s, 1:numStopTrialsToRemove) = true;

        end
    end
end

% Make 'Sparsified' versions of relevant data arrays, with trials
% removed by one of the 12 SSRT calculation methods set to NaN ('not a
% number')
go_GoRT_sparse = go_GoRT;
go_Correct_sparse = go_Correct;
stop_SSD_actual_sparse = stop_SSD_actual;
stop_Correct_sparse = stop_Correct;
stop_TrialComplete_sparse = stop_TrialComplete;

go_GoRT_sparse(go_ignoreTrials) = NaN;
go_Correct_sparse(go_ignoreTrials) = false;
stop_SSD_actual_sparse(stop_ignoreTrials) = NaN;
stop_Correct_sparse(stop_ignoreTrials) = false;
stop_TrialComplete_sparse(stop_ignoreTrials) = false;

subjectSSRTs_final = QuantileMethodSSRT(go_GoRT_sparse, go_Correct_sparse, stop_SSD_actual_sparse, stop_Correct_sparse, stop_TrialComplete_sparse);

fprintf('Estimated SSRT values for each subject: \n');
for p = 1:numel(subjectSSRTs_final)
    if ~isnan(subjectSSRTs_final(p))
        disp(['Subject ' num2str(p) ': ' num2str(subjectSSRTs_final(p)) ' seconds']);
    else
        disp(['Subject ' num2str(p) ': excluded, no SSRT calculated']);
    end
end

end